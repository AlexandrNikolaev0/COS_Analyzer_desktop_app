# -*- coding: utf-8 -*-
import json
import time

# Form implementation generated from reading ui file 'authWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import serial
import serial.tools.list_ports
import glob

class Ui_MainWindow(object):
    serialAnalyzer = serial.Serial()
    statusMessage=""
    def setupUi(self, MainWindow):
        """Настройка интерфейса. Всё кроме последней функции сгенерированно в Qt Designer"""
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(808, 620)
        MainWindow.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("color:FFFFFF\n"
                                         "")
        self.centralwidget.setObjectName("centralwidget")
        self.username_label = QtWidgets.QLabel(self.centralwidget)
        self.username_label.setGeometry(QtCore.QRect(10, 380, 176, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.username_label.setFont(font)
        self.username_label.setObjectName("username_label")
        self.username_lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.username_lineEdit.setGeometry(QtCore.QRect(190, 380, 203, 29))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.username_lineEdit.setFont(font)
        self.username_lineEdit.setObjectName("username_lineEdit")
        self.password_label = QtWidgets.QLabel(self.centralwidget)
        self.password_label.setGeometry(QtCore.QRect(410, 380, 81, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.password_label.setFont(font)
        self.password_label.setObjectName("password_label")
        self.password_lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.password_lineEdit.setGeometry(QtCore.QRect(490, 380, 203, 29))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.password_lineEdit.setFont(font)
        self.password_lineEdit.setObjectName("password_lineEdit")
        self.port_comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.port_comboBox.setGeometry(QtCore.QRect(10, 300, 791, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.port_comboBox.setFont(font)
        self.port_comboBox.setMouseTracking(True)
        self.port_comboBox.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContentsOnFirstShow)
        self.port_comboBox.setObjectName("port_comboBox")
        self.portUpdate_pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.portUpdate_pushButton.setGeometry(QtCore.QRect(10, 240, 98, 34))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.portUpdate_pushButton.setFont(font)
        self.portUpdate_pushButton.setObjectName("portUpdate_pushButton")
        self.portConnect_pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.portConnect_pushButton.setGeometry(QtCore.QRect(120, 240, 123, 34))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.portConnect_pushButton.setFont(font)
        self.portConnect_pushButton.setObjectName("portConnect_pushButton")
        self.login_pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.login_pushButton.setGeometry(QtCore.QRect(700, 380, 93, 34))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.login_pushButton.setFont(font)
        self.login_pushButton.setObjectName("login_pushButton")
        self.connectionIndicator_label = QtWidgets.QLabel(self.centralwidget)
        self.connectionIndicator_label.setGeometry(QtCore.QRect(250, 240, 40, 40))
        self.connectionIndicator_label.setStyleSheet("\n"
                                                     "background-color: rgb(255, 15, 15);\n"
                                                     "border-radius: 20px;")
        self.connectionIndicator_label.setText("")
        self.connectionIndicator_label.setObjectName("connectionIndicator_label")
        self.connectionText_label = QtWidgets.QLabel(self.centralwidget)
        self.connectionText_label.setGeometry(QtCore.QRect(300, 240, 91, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.connectionText_label.setFont(font)
        self.connectionText_label.setAcceptDrops(False)
        self.connectionText_label.setWordWrap(True)
        self.connectionText_label.setObjectName("connectionText_label")
        self.status_label = QtWidgets.QLabel(self.centralwidget)
        self.status_label.setGeometry(QtCore.QRect(10, 480, 791, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.status_label.setFont(font)
        self.status_label.setStyleSheet("color: rgb(124, 124, 124)");
        self.status_label.setText("")
        self.status_label.setObjectName("status_label")
        self.login_pushButton.raise_()
        self.portConnect_pushButton.raise_()
        self.username_label.raise_()
        self.port_comboBox.raise_()
        self.portUpdate_pushButton.raise_()
        self.password_lineEdit.raise_()
        self.username_lineEdit.raise_()
        self.password_label.raise_()
        self.connectionIndicator_label.raise_()
        self.connectionText_label.raise_()
        self.status_label.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 808, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.add_functions()



    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.username_label.setText(_translate("MainWindow", "Имя пользователя:"))
        self.password_label.setText(_translate("MainWindow", "Пароль:"))
        self.portUpdate_pushButton.setText(_translate("MainWindow", "Обновить"))
        self.portConnect_pushButton.setText(_translate("MainWindow", "Подключить"))
        self.login_pushButton.setText(_translate("MainWindow", "Войти"))
        self.connectionText_label.setText(_translate("MainWindow", "Устройство отключено"))

    def updatePortList(self):
        """Обновляет выпадающий список портов"""
        self.statusMessage = ""
        self.status_label.setText(self.statusMessage)
        self.port_comboBox.clear()
        self.portSearch()
        for i in serial.tools.list_ports.comports():
            print(i)
            self.port_comboBox.addItem(str(i))
        self.statusMessage = "Доступные устройства обновлены"
        self.status_label.setText(self.statusMessage)
    def make_connection_request(self):
        """Формирует команду для проверки связи с контроллером"""
        message = {"cmd": "get_status"}
        return json.dumps(message)
    def sendJson(self,jsonData):
        """Отправляет любую команду и возвращает ответ (если дождется)"""
        try:
            self.serialAnalyzer.write(bytes(jsonData, 'utf-8'))
            answerMessage = self.serialAnalyzer.readline(2)
            return answerMessage
        except serial.SerialTimeoutException:
            self.statusMessage = "Не удается подключиться к устройству"
            self.status_label.setText(self.statusMessage)
            self.status_label.adjustSize()
            self.serialAnalyzer.close()
            return ""

    def sendJsonNoAnswer(self, jsonData):
        """Отправляет любую команду и не ждет ответ"""
        self.serialAnalyzer.write(bytes(jsonData, 'utf-8'))

    def connectUSB(self, comPort):
        """Подключается к контроллеру по Serial"""
        if (not self.serialAnalyzer.port == comPort):
            self.serialAnalyzer.port = comPort
        self.serialAnalyzer.baudrate = 115200
        self.serialAnalyzer.timeout = .1
        self.serialAnalyzer.writeTimeout = 1

        if (not self.serialAnalyzer.is_open):
            try:
                self.serialAnalyzer.open()
            except serial.SerialException as e:
                self.statusMessage = "Не удается подключиться к устройству"
                self.status_label.setText(self.statusMessage)
                self.status_label.adjustSize()


    def connectToAnalyzer(self,port="COM5"):
        """Обработчик нажатия на кнопку Подключить/Отключить"""
        if(port.find("(")>0):
            port = port[port.find("(") + 1:port.find(")")]

        allPorts=[]
        portsCount = self.port_comboBox.count()
        buttonStartState = self.portConnect_pushButton.text()
        if(buttonStartState=="Подключить"):
            for i in range(portsCount):
                if(len(self.port_comboBox.itemText(i))>=1):
                    newPort = self.port_comboBox.itemText(i)[self.port_comboBox.itemText(i).find("(")+1:self.port_comboBox.itemText(i).find(")")]
                    allPorts.append(newPort)
            if(port in allPorts):

                self.connectUSB(port)
                jsonAnswer=""
                if(self.serialAnalyzer.is_open):
                    jsonAnswer=self.sendJson(self.make_connection_request())
                ##ЗАГЛУШКА
                if(port=="COM5"):
                    jsonAnswer="{\"status\":1}"
                if(str(jsonAnswer).find("{")>=0):

                    answer = json.loads(jsonAnswer)

                    if(self.portConnect_pushButton.text()=="Подключить" and answer.get("status")==1): ##Make checking
                        self.portConnect_pushButton.setText("Отключить")
                        self.connectionText_label.setText("Устройство подключено")
                        self.connectionText_label.adjustSize()
                        self.connectionIndicator_label.setStyleSheet("\n"
                                                                 "background-color: rgb(15, 255, 15);\n"
                                                                 "border-radius: 20px;")
                        self.statusMessage = "Подключение к устройству прошло успешно"
                        self.status_label.setText(self.statusMessage)
                        self.status_label.adjustSize()
            else:
                self.portConnect_pushButton.setText("Подключить")
                self.connectionText_label.setText("Устройство отключено")
                self.connectionIndicator_label.setStyleSheet("\n"
                                                            "background-color: rgb(255, 15, 15);\n"
                                                            "border-radius: 20px;")
                self.connectionText_label.adjustSize()
                self.statusMessage="Не удается подключиться к устройству"
                self.status_label.setText(self.statusMessage)
                self.status_label.adjustSize()
        if(buttonStartState=="Отключить"):
            self.portConnect_pushButton.setText("Подключить")
            self.connectionText_label.setText("Устройство отключено")
            self.connectionIndicator_label.setStyleSheet("\n"
                                                         "background-color: rgb(255, 15, 15);\n"
                                                         "border-radius: 20px;")
            self.connectionText_label.adjustSize()
            self.serialAnalyzer.close()
            self.statusMessage = "Устройство отключено"
            self.status_label.setText(self.statusMessage)
            self.status_label.adjustSize()

    def make_auth_request(self):
        """Формирует запрос контроллеру с данными для авторизации"""
        message = {"cmd": "auth", "login":self.username_label.text(),"password":self.password_label.text()}
        return json.dumps(message)
    def authorization(self):
        """Обработчик нажатия на кнопку Войти"""
        if(self.portConnect_pushButton.text()=="Отключить"):
            jsonAnswer = self.sendJson(self.make_auth_request())
            if ((self.username_lineEdit.text() == "Analyst") or (
                    self.username_lineEdit.text() == "Lab Manager" and self.password_lineEdit.text() == "123")):
                jsonAnswer = "{\"status\":1}"
            else:
                jsonAnswer = "{\"status\":0}"
            print(str(jsonAnswer))
            if (str(jsonAnswer).find("{") >= 0):
                answer = json.loads(jsonAnswer)
                if(answer.get("status")==1):
                    self.statusMessage = "Вход под именем "+self.username_lineEdit.text()+" выполнен успешно"
                    self.status_label.setText(self.statusMessage)
                    self.status_label.adjustSize()
                if (answer.get("status") == 0):
                    self.statusMessage = "Неверно имя пользователя и/или пароль"
                    self.status_label.setText(self.statusMessage)
                    self.status_label.adjustSize()
                if (answer.get("status") == -1):
                    self.statusMessage = "Неизвестная ошибка"
                    self.status_label.setText(self.statusMessage)
                    self.status_label.adjustSize()
            else:
                self.statusMessage = "Неизвестная ошибка (отсутствует ответ от устройства)"
                self.status_label.setText(self.statusMessage)
                self.status_label.adjustSize()
        else:
            self.statusMessage = "Устройство отключено, вход невозможен"
            self.status_label.setText(self.statusMessage)
            self.status_label.adjustSize()

    def add_functions(self):
        """Добавленные действия и обработчики элементов интерфейса к интерфейсу приложения. По сути, формирование логики работы"""
        self.updatePortList()
        self.portUpdate_pushButton.clicked.connect(lambda:self.updatePortList())
        self.portConnect_pushButton.clicked.connect(lambda:self.connectToAnalyzer(self.port_comboBox.currentText()))
        self.status_label.setText(self.statusMessage)
        self.status_label.adjustSize()
        self.login_pushButton.clicked.connect(lambda: self.authorization())

    def portSearch(self):
        """ Lists serial port names

        :raises EnvironmentError:
            On unsupported or unknown platforms
        :returns:
            A list of the serial ports available on the system
        """
        if sys.platform.startswith('win'):
            ports = ['COM%s' % (i + 1) for i in range(256)]
        elif sys.platform.startswith('linux') or sys.platform.startswith('cygwin'):
            # this excludes your current terminal "/dev/tty"
            ports = glob.glob('/dev/tty[A-Za-z]*')
        elif sys.platform.startswith('darwin'):
            ports = glob.glob('/dev/tty.*')
        else:
            raise EnvironmentError('Unsupported platform')

        result = []
        for port in ports:
            try:
                s = serial.Serial(port)
                s.close()
                result.append(port)
            except (OSError, serial.SerialException):
                pass
        return result

    def portSearchShow():
        """Выводит найденные порты"""
        for i in serial.tools.list_ports.comports():
            print(i)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
